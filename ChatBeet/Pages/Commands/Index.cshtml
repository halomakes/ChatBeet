@page
@model ChatBeet.Pages.Commands.IndexModel
@using ChatBeet.Utilities
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Humanizer
@{
    ViewBag.Title = "Commands";
    var ParameterRgx = new Regex(@"(\{[^\{\}]+\})+", RegexOptions.Compiled);
}

<h1>Commands</h1>
<p class="text-warning font-italic">
    Note that this page does not currently cover dynamic commands and aliases.
</p>

<cache>
    <div id="accordion">
        @foreach (var binding in Model.Builder.Bindings.OrderBy(b => b.Key))
        {
            var id = TagBuilder.CreateSanitizedId(binding.Key, "_");
            <div class="card" id="@id">
                <div class="card-header d-flex justify-content-between flex-wrap align-items-md-center flex-md-row flex-column align-items-start" id="heading-@id" data-toggle="collapse" data-target="#collapse-@id" aria-expanded="false" aria-controls="collapse-@id" role="button">
                    <h4 class="mb-0">
                        @binding.Key
                    </h4>
                    @if (!string.IsNullOrWhiteSpace(binding.Value.Command.Description))
                    {
                        <span>@binding.Value.Command.Description</span>
                    }
                </div>

                <div id="collapse-@id" class="collapse" aria-labelledby="heading-@id" data-parent="#accordion">
                    <div class="card-body">
                        <p>
                            @binding.Value.Command.Description
                        </p>
                        <div class="mb-4">
                            <h5>Example Usage</h5>
                            <code>
                                <span class="text-white-50">@Model.CommandPrefix</span>
                                @foreach (var segment in ParameterRgx.Split(binding.Value.Command.CommandFormat))
                                {
                                    if (segment.StartsWith("{"))
                                    {
                                        <text>@segment</text>
                                    }
                                    else
                                    {
                                        <span class="text-white">@segment</span>
                                    }
                                }
                            </code>
                        </div>

                        @if (binding.Value.Command.ParameterNames.Any())
                        {
                            var methodParams = binding.Value.Method.GetParameters();
                            <div class="mb-4">
                                <h5>Parameters</h5>
                                <ul>
                                    @foreach (var parameter in methodParams)
                                    {
                                        var validators = parameter.GetCustomAttributes(typeof(ValidationAttribute), true).Cast<ValidationAttribute>();

                                        <li>
                                            <code>@parameter.Name</code>
                                            <span class="text-white-50">(@parameter.GetFriendlyTypeName())</span>
                                            @if (validators.Any())
                                            {
                                                <ul>
                                                    @foreach (var validator in validators)
                                                    {
                                                        <li>
                                                            @validator.FormatErrorMessage(parameter.Name)
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        @{
                            var hasRestriction = binding.Value.HasPolicy
                                || binding.Value.IsChannelOnly
                                || binding.Value.IsDirectOnly
                                || binding.Value.IsRateLimited;
                        }
                        @if (hasRestriction)
                        {
                            <div class="mb-4">
                                <h5>Restrictions</h5>
                                <ul>
                                    @if (binding.Value.IsChannelOnly)
                                    {
                                        <li>This command can only be used in channels.</li>
                                    }
                                    @if (binding.Value.IsDirectOnly)
                                    {
                                        <li>This command can only be used in direct messages.</li>
                                    }
                                    @if (binding.Value.IsRateLimited)
                                    {
                                        <li>This command can only be used once every @binding.Value.RateLimitPeriod.Value.Humanize().</li>
                                    }
                                    @if (binding.Value.HasPolicy && Model.Builder.Policies.Any(p => p.Key.ToLower() == binding.Value.PolicyName.ToLower()))
                                    {
                                        var policy = Model.Builder.Policies.First(p => p.Key.ToLower() == binding.Value.PolicyName.ToLower()).Value;
                                        <li>
                                            @switch (policy.Mode)
                                            {
                                                case GravyBot.Commands.ChannelPolicy.PolicyMode.Blacklist:
                                                    <text>This command cannot be used in these channels:</text>
                                                    break;
                                                case GravyBot.Commands.ChannelPolicy.PolicyMode.Whitelist:
                                                    <text>This command can only be used in these channels:</text>
                                                    break;
                                                default: break;
                                            }
                                            <ul>
                                                @foreach (var chan in policy.Channels)
                                                {
                                                    <li>
                                                        @chan
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    <p class="my-3">Last generated at @DateTime.Now</p>
</cache>