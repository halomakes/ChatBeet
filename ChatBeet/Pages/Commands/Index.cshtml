@page
@model ChatBeet.Pages.Commands.IndexModel
@using DSharpPlus
@using DSharpPlus.SlashCommands
@inject DiscordClient Discord;
@{
    ViewBag.Title = "Commands";
    var commands = Discord.GetSlashCommands();
}

<h1>Commands</h1>
<p class="text-warning font-italic">
    Note that this page does not currently cover dynamic commands and aliases.
</p>

<cache>
    <div id="accordion">
        @foreach (var binding in commands.RegisteredCommands.First().Value.Where(c => c.Type == ApplicationCommandType.SlashCommand).OrderBy(c => c.Name))
        {
            var id = TagBuilder.CreateSanitizedId(binding.Name, "_");
            <div class="card" id="@id">
                <div class="card-header d-flex justify-content-between flex-wrap align-items-md-center flex-md-row flex-column align-items-start" id="heading-@id" data-toggle="collapse" data-target="#collapse-@id" aria-expanded="false" aria-controls="collapse-@id" role="button">
                    <h4 class="mb-0">
                        @binding.Name
                    </h4>
                    @if (!string.IsNullOrWhiteSpace(binding.Description))
                    {
                        <span>@binding.Description</span>
                    }
                </div>

                <div id="collapse-@id" class="collapse" aria-labelledby="heading-@id" data-parent="#accordion">
                    <div class="card-body">
                        <p>
                            @binding.Description
                        </p>
                        <div class="mb-4">
                            <h5>Example Usage</h5>
                            <code>
                                <span class="text-white-50">/@binding.Name</span>
                                @if (binding?.Options?.Any() ?? false)
                                {
                                    foreach (var opt in binding.Options)
                                    {
                                        <span class="text-white">&lt;@opt.Name&gt;</span>
                                    }
                                }
                            </code>
                        </div>

                        @if (binding?.Options?.Any() ?? false)
                        {
                            <div class="mb-4">
                                <h5>Parameters</h5>
                                <ul>
                                    @foreach (var opt in binding.Options)
                                    {
                                        <li>
                                            <code>@opt.Name</code>
                                            <span class="text-white-50">(@opt.Type)</span>
                                            <div>@opt.Description</div>
                                            <ul>
                                                <li>
                                                    @(opt.Required == true ? "Required" : "Optional").
                                                </li>
                                                @if (opt.Choices is not null && opt.Choices.Any())
                                                {
                                                    <li>
                                                        Available Choices:
                                                        <ul>
                                                            @foreach (var c in opt.Choices)
                                                            {
                                                                <li>@c.Name</li>
                                                            }
                                                        </ul>
                                                    </li>
                                                }
                                                @if (opt.AutoComplete == true)
                                                {
                                                    <li>
                                                        Autocomplete available.
                                                    </li>
                                                }
                                                @if (opt.MinLength is not null)
                                                {
                                                    <li>
                                                        Min Length: @opt.MinLength
                                                    </li>
                                                }
                                                @if (opt.MaxLength is not null)
                                                {
                                                    <li>
                                                        Max Length: @opt.MaxLength
                                                    </li>
                                                }
                                                @if (opt.MinValue is not null)
                                                {
                                                    <li>
                                                        Min Value: @opt.MinValue
                                                    </li>
                                                }
                                                @if (opt.MaxValue is not null)
                                                {
                                                    <li>
                                                        Max Value: @opt.MaxValue
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        <div class="mb-4">
                            <h5>Restrictions</h5>
                            <ul>
                                <li>This command @(binding.AllowDMUsage == true ? "can" : "cannot") be used in direct messages.</li>
                            </ul>
                        </div>

                    </div>
                </div>
            </div>
        }
    </div>
    <p class="my-3">Last generated at @DateTime.Now</p>
</cache>